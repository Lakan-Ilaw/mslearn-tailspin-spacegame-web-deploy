trigger: 
- 'PS_build'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'PS_build'
  azureSubscription: "Azure subscription 1"

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

# Deploy to Dev
- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self # Essential: Checks out your repository
          - script: |
              echo "Current Directory:"
              pwd  # Print the current working directory
              echo "Repository Root (should be /home/vsts/work/1/s on Linux agents):"
              echo "$(System.DefaultWorkingDirectory)" # Or $env:System_DefaultWorkingDirectory in PowerShell
              echo "Contents of the 'scripts' directory:"
              ls -l scripts  # List files in the 'scripts' directory (Linux)
              echo "Contents of the repository root:"
              ls -lR  # List all files and directories recursively from the root (Linux)
            displayName: 'Check File Paths'
          - download: current
            artifact: drop
          - task: PowerShell@2
            displayName: 'Deploy to Dev Environment'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/scripts/Deploy-WebApp.ps1'
              arguments: '-appName $(WebAppNameDev) -environment "Dev" -resourceGroup $(ResourceGroup) -artifactPath "$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip"'
              pwsh: true

# Deploy to Test
- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: test
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: PowerShell@2
            displayName: 'Deploy to Test Environment'
            inputs:
              targetType: 'filePath'
              filePath: '$(Build.SourcesDirectory)/scripts/Deploy-WebApp.ps1'
              arguments: '-appName $(WebAppNameTest) -environment "Test" -resourceGroup $(ResourceGroup) -artifactPath "$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip"'
              pwsh: true

# Deploy to Staging
- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: staging
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: PowerShell@2
            displayName: 'Deploy to Staging Environment'
            inputs:
              filePath: '$(Build.SourcesDirectory)/scripts/Deploy-WebApp.ps1'
              arguments: '-appName $(WebAppNameStaging) -environment "Staging" -resourceGroup $(ResourceGroup) -artifactPath "$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip"'
              pwsh: true